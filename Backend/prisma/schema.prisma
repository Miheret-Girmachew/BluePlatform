generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  email               String            @unique
  password            String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  resume              String?
  skills              String[]
  university          String?
  currentYear         Int?
  degree              String?
  expectedGraduation  DateTime?
  fieldOfStudy        String?
  githubProfile       String?
  isGraduate          Boolean           @default(false)
  isStudent           Boolean           @default(false)
  linkedInProfile     String?
  minSalary           Float?
  portfolioWebsite    String?
  preferredIndustries String[]
  preferredJobTypes   JobType[]
  preferredLocations  String[]
  remotePreference    RemotePreference?
  fullName            String
  applications        Application[]
  matches             Match[]
  notifications       Notification[]
}

model Company {
  id                String      @id @default(uuid())
  name              String
  email             String      @unique
  password          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  description       String?
  industry          String
  location          String
  website           String?
  foundedYear       Int?
  isVerified        Boolean     @default(false)
  logo              String?
  refreshToken      String?
  size              CompanySize
  verificationToken String?
  jobs              Job[]
}

model Job {
  id                 String           @id @default(uuid())
  companyId          String
  title              String
  description        String
  requirements       String[]
  responsibilities   String[]
  location           String
  salary             String?
  jobType            JobType
  experienceLevel    ExperienceLevel
  isInternship       Boolean          @default(false)
  internshipDuration String?
  targetAudience     TargetAudience[]
  postedAt           DateTime         @default(now())
  deadline           DateTime
  isActive           Boolean          @default(true)
  applications       Application[]
  company            Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  matches            Match[]
}

model Application {
  id          String            @id @default(uuid())
  jobId       String
  applicantId String
  coverLetter String?
  resumeUrl   String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  notes       String?
  applicant   User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Match {
  id               String   @id @default(uuid())
  userId           String
  jobId            String
  score            Float
  matchFactors     Json
  createdAt        DateTime @default(now())
  viewed           Boolean  @default(false)
  saved            Boolean  @default(false)
  notificationSent Boolean  @default(false)
  job              Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  link      String?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum TargetAudience {
  STUDENTS
  GRADUATES
  BOTH
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
  FREELANCE
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum RemotePreference {
  ON_SITE
  REMOTE
  HYBRID
  FLEXIBLE
}

enum NotificationType {
  APPLICATION_UPDATE
  NEW_JOB
  NEW_MATCH
  INTERVIEW
  MESSAGE
  SYSTEM
}
